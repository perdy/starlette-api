[build-system]
requires = ["poetry_core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "flama"
version = "0.16.0"
description = "Fire up your API"
authors = [
    "José Antonio Perdiguero López <perdy@perdy.io>",
    "Miguel A. Durán Olivencia <migduroli@gmail.com>"
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/perdy/flama"
keywords = ["machine-learning", "ml", "ml-ops", "mlops", "api", "rest", "restful", "openapi", "tensorflow", "pytorch", "sklearn"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Application Frameworks"
]
include = ["flama/py.typed", "flama/templates/**/*"]
exclude = []

[tool.poetry.dependencies]
python = "^3.7"
starlette = ">=0.21.0,<1.0.0"
click = "^8.1"
uvicorn = "^0.18.3"
Jinja2 = "^3.1.2"
marshmallow = { version = "^3.0", optional = true }
python-forge = { version = "^18.6", optional = true }
apispec = { version = "^5.0", optional = true }
typesystem = { version = "^0.4.1", optional = true }
SQLAlchemy = { version = "^1.4", extras = ["asyncio"], optional = true }

[tool.poetry.extras]
typesystem = ["typesystem"]
marshmallow = ["marshmallow", "apispec"]
pagination = ["python-forge"]
database = ["sqlalchemy"]

[tool.poetry.scripts]
flama = 'flama.cli.__main__:cli'

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-xdist = { version = "^2.5", extras = ["psutil"] }
pytest-cov = "^3.0"
pytest-asyncio = "^0.19"
clinner = "^1.12"
ipython = [
    { version = "^7.0", python = ">=3.7,<3.8" },
    { version = "^8.0", python = ">=3.8" }
]
isort = "^5.1"
python-multipart = "^0.0.5"
flake8 = "^5.0"
black = { version = "^22.3", extras = ["d"]}
uvicorn = {version = ">=0.18.3,<1.0.0", extras = ["standard"]}
httpx = "^0.23.0"
aiosqlite = ">=0.11.0,<1.0.0"
requests = "^2.22.0"
Faker = "^8.2.0"
marshmallow = "^3.0"
python-forge = "^18.6"
apispec = "^5.0"
typesystem = "^0.4.1"
SQLAlchemy = { version = "^1.4", extras = ["asyncio"] }
gevent = "^21.12.0"
mypy = "^0.942"
scikit-learn = [
    { version = "^1.0.0", python = ">=3.7,<3.8" },
    { version = "^1.1.0", python = ">=3.8" }
]
tensorflow-cpu = { version = "^2.9", python = ">=3.7,<3.11" }
pre-commit = "^2.19.0"
torch = "^1.12.1"

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
atomic = true
multi_line_output = 3
include_trailing_comma = true
line_length = 120
skip_glob = [
    "*/.venv/**",
    "*/docs/**",
    "*/build/**",
    "*/dist/**",
]

[tool.mypy]
python_version = 3.7
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
show_error_codes = true
exclude = [
    "\\.venv",
    "\\.github",
    "examples",
    "docs",
    "build",
    "dist",
    "tests",
]

[tool.pytest.ini_options]
minversion = 3
addopts = "-n auto --junitxml=./test-results/pytest/results.xml --no-cov-on-fail --cov-report=html --cov-report=xml --cov-report=term-missing --cov-config=pyproject.toml --cov=. --pdbcls=IPython.terminal.debugger:TerminalPdb"
norecursedirs = [
    "*settings*",
    "*urls*",
    "*docs*",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = [
    "."
]
branch = true
omit = [
    ".venv*",
    "*settings*",
    "*__init__.py",
    "*__main__.py",
    "*tests*",
    "*/migrations/*",
    "make",
    "examples*",
    "flama/cli/*",
    "flama/authentication.py",
    "flama/middleware.py",
    "flama/testclient.py",
]
concurrency = ["thread", "gevent"]

[tool.coverage.report]
show_missing = true
ignore_errors = true
fail_under = 95
exclude_lines = [
    "noqa",
    "pragma: no cover",
    "pass",
    "\\.\\.\\.",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def __repr__",
    "def __str__",
    "if cls\\.debug",
    "if settings\\.DEBUG",
    "if (typing\\.|t\\.)?TYPE_CHECKING:",
]

[tool.coverage.paths]
source = [
    "./"
]

[tool.coverage.html]
directory = "./test-results/coverage_html/"

[tool.coverage.xml]
output = "./test-results/coverage.xml"

[tool.coverage.json]
output = "./test-results/coverage.json"
